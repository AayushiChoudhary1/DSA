 void Bellmon(vector<vector<int>>&edges, vector<int>&dist)
    {
        for(int i=0; i<edges.size(); i++)
        {
            if(dist[edges[i][1]]= min(dist[edges[i][1]], dist[edges[i][0]]+ edges[i][2]));
        }
    }
    
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) 
    {
        vector<int>dist(V, 1e8);
        dist[S]=0;
        for(int i=0; i<V; i++)
        {
            Bellmon(edges,dist);
        }
        
        vector<int>ans(V);
        for(int i=0; i<V; i++)
        ans[i]=dist[i];
        
        Bellmon(edges,dist);
        
        for(int i=0; i<V; i++)
        {
            if(ans[i] != dist[i])
            {
                vector<int>temp;
                temp.push_back(-1);
                return temp;
            }
        }
        return dist;





*******************************************more optimized code ****************************************************
 bool Bellmon(vector<vector<int>>&edges, vector<int>&dist)
    {
        bool count = 1;
        for(int i=0; i<edges.size(); i++)
        {   if(dist[edges[i][1]] > dist[edges[i][0]]+ edges[i][2])
            {
                dist[edges[i][1]]= dist[edges[i][0]]+ edges[i][2];
                count = 0;
            }
            
        }
        return count;
    }
    
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) 
    {
        vector<int>dist(V, 1e8);
        dist[S]=0;
        for(int i=0; i<V; i++)
        {
            if(Bellmon(edges,dist))
            return dist;
        }
        
       
        //negative cycle
        if(!Bellmon(edges,dist))
            {
                vector<int>temp;
                temp.push_back(-1);
                return temp;
            }
        
       
        return dist;
    }
    }
