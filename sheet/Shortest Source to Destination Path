bool check(int i, int j, int row, int col)
    {
        return i>-1 && i<row && j>-1 && j<col;
    }
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y)
    {
        if(A[0][0]==0)
        return -1;

        queue<pair<pair<int,int>,int>>q;
        q.push({{0,0},0});
        
        A[0][0]=0;
        
        int step = 0;
        while(!q.empty())
        {
            int i=q.front().first.first;
            int j=q.front().first.second;
            
            step=q.front().second;
            
            if(i==X && j==Y)
            return step;
            
            q.pop();
            
            int derow[4]={-1,1,0,0};
            int decol[4]={0,0,-1,1};
            
            for(int k=0; k<4; k++)
            {
                if(check(i+derow[k], j+decol[k], N, M) && A[i+derow[k]][j+decol[k]])
                {
                    A[i+derow[k]][j+decol[k]] = 0;
                    q.push({{i+derow[k], j+decol[k]}, step+1});
                }
            }
        }
        
        return -1;
    }
