  bool check(int i, int j, int n)
    {
        return i>0 && j>0 && i<=n && j<=n;
    }
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    int row[8] = {2,2,-2,-2,1,1,-1,-1};
	    int col[8] = {1,-1,1,-1,2,-2,2,-2};
	    
	    //row,col,step
	    
	    queue<pair<pair<int,int>,int>>q;
	    q.push({{KnightPos[0],KnightPos[1]},0});
	    
	    vector<vector<bool>>visit(N+1, vector<bool>(N+1,0));
	    
	    visit[KnightPos[0]][KnightPos[1]]=1;
	    
	    int i,j,step=0;
	    
	    while(!q.empty())
	    {
	        i=q.front().first.first;
	        j=q.front().first.second;
	        step=q.front().second;
	        
	        if(i==TargetPos[0] && j==TargetPos[1])
	        return step;
	        
	        q.pop();
	        
	        for(int k=0; k<8; k++)
	        {
	            if(check(i+row[k], j+col[k], N) && !visit[i+row[k]][j+col[k]])
	            {
	                visit[i+row[k]][j+col[k]]=1;
	                
	                q.push({{i+row[k], j+col[k]}, step+1});
	            }
	        }
	    }
	    
	    return -1;
	}
