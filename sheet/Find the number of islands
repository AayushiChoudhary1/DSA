  bool check(int i, int j, int row, int col)
    {
        return i>-1 && i<row && j>-1 && j<col;
    }
    
    void BFS(vector<vector<char>>&grid, int i, int j)
    {
        int n = grid.size();
        int m = grid[0].size();
        
        int derow[8] = {-1, -1, -1, 0,  0, 1, 1,  1};
        int decol[8] = {0, -1,  1, -1, 1, -1, 0, 1};
        queue<pair<int,int>>q;
        
        q.push({i,j});
        
        while(!q.empty())
        {
            i=q.front().first;
            j=q.front().second;
            q.pop();
            
            for(int k=0; k<8; k++)
            {
                if(check(i+derow[k], j+decol[k], n, m) && grid[i+derow[k]][j+decol[k]]=='1')
                {
                    grid[i+derow[k]][j+decol[k]]='0';
                    q.push({i+derow[k],j+decol[k]});
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        
        for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
        {
            if(grid[i][j]=='1')
            {
                 grid[i][j]='0';
                count++;
             
               BFS(grid,i,j);
            }
        }
        return count;
    }
