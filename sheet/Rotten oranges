


    //Function to find minimum time required to rot all oranges. 
    
    bool check(int i, int j, int row, int col)
    {
        return i>-1 && i<row && j>-1 && j<col;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        
        int row[4]= {-1,1,0,0};
        int col[4]={0,0,-1,1};
        int goodOrange = 0;
        queue<pair<pair<int,int>,int>>q;
        
        for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
        {
            if(grid[i][j]==1)
            goodOrange++;
            else if(grid[i][j]==2)
            {
                q.push({{i,j},0});
            }
        }
        int i,j, timer = 0;
        
        while(!q.empty())
        {
            i=q.front().first.first;
            j=q.front().first.second;
            timer = q.front().second;
            q.pop();
            
            for(int k=0; k<4; k++)
            {
                if(check(i+row[k], j+col[k], n, m) &&  grid[i+row[k]][j+col[k]]==1)
                {
                    grid[i+row[k]][j+col[k]]=0;
                    goodOrange--;
                    q.push({{i+row[k],j+col[k]}, timer+1});
                }
            }
            
        }
         if(goodOrange)
            return -1;
            else 
              return timer;
    }
};

