

///method 1: 
class Solution {
public:
    // calculate length of string***********************************************
    int commonprefixlength(vector<string>& strs){
        int min = strs[0].length();
        for(int i=0; i<strs.size(); i++){
            if(strs[i].length()<min)
                min = strs[i].length();
        }
            return min;
    }
    
    
    //comapare character wise**********************************************
    string longestCommonPrefix(vector<string>& strs) {
        int minlen = commonprefixlength(strs);
        char current;
        string result="";
        
        for(int i=0; i<minlen; i++){
            current = strs[0][i];
            for(int j=0; j<strs.size(); j++){
                if(strs[j][i]!=current)
                    return result;
            }
            result += current;
        }
        return result;
    }
};













method2: //
class Solution {
public:
    
    string commonprefix(string strs1, string strs2){
        string result= "";
        int len = min(strs1.length(),strs2.length());
        for(int i=0; i<len; i++){
            if(strs1[i]!=strs2[i])
                break;
            result +=strs1[i];
            
        }
        return result;
    }
    
    string longestCommonPrefix(vector<string>& strs) {
        string prefix = strs[0];
        for(int i=0; i<strs.size(); i++){
            prefix = commonprefix(prefix,strs[i]);
        }
        return prefix;
    }
    
    
};
