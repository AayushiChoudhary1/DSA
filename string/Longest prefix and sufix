

Time complexity : O(N)

explaination:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
                 a b c d a b c e a  b  c  d  a  b  c  d  a  b
          LPS  0 0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0
          LPS  0 0 0 0 0 1 2 3 0 1  2  3  4  5  6  7  0 --------------because str[first+1] != str[second] => e ==d so, critical case occur and second can't go back. 
                                                                      so, first if updated by first = LPS[first] => first = LPS[7] =  3;
          LPS  0 0 0 0 0 1 2 3 0 1  2  3  4  5  6  7  4  5  6
          
          
class Solution{
  public:		
	int lps(string s) {
	    int LPS[s.size()+1];                  
                                              
	    char str[s.size()+1];
	    
	    for(int i=0; i<s.size(); i++){
	        str[i+1] = s[i]; ----------------------- START INDEX FROM 1 SO, IT IS SHIFTED TOWARD RIGHT
	        LPS[i] = 0;  
	    };
	    
	    LPS[s.size()] = 0;   ------------last index initalized with 0 because not to initalize in loop
	    
	    int first = 0, second=2;
	    while(second <= s.size()){
	        if(str[first+1] == str[second])
	        {
	            LPS[second] = first+1;
	            first++, second++;
	        }
	        else{
	            if(first == 0)
	                second++;
	            else
	                first = LPS[first];
	        }
	    }
	    return LPS[s.size()];
	}
};
