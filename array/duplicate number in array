class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        
        for(int i=0; i<n; i++){
            int index =abs(nums[i])-1;
            int val = nums[index];
            
            if(val < 0)
                return abs(nums[i]);
            
            else
                nums[index] = -nums[index];
        }
        
        return -1;
    }
    
};

********************************************************************using swaping solve the problem with constant space*************************************************
int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int i =0;
        while(i < n){
            if(nums[i] != nums[nums[i]-1])
                swap(nums[i],nums[nums[i]-1]);
            else
                i++;
                
            
        }
        for(int i=0; i<n; i++){
            if(nums[i] != i+1) return nums[i];
        }
        
        
        return -1;
    }
 
